Анонимные методы или лямбда-выражения
Функции высшего порядка filter и map
Бесконечные последовательности
Функция ZIP
Функция FlatMap
Функции with и let
Создание функций высшего порядка
Extension-функции




1. Анонимные методы или лямбда-выражения
Лямбда-выражения — это функции, которые не привязаны к какому-либо имени и могут быть использованы как "анонимные методы". Лямбда-выражения в Kotlin записываются следующим образом:

kotlin

val sum = { x: Int, y: Int -> x + y }
println(sum(3, 5)) // Вывод: 8
2. Функции высшего порядка filter и map
Функции высшего порядка — это функции, которые принимают в качестве аргументов другие функции или возвращают их.

filter: фильтрует коллекцию по условию.
map: преобразует элементы коллекции.
Примеры:

kotlin

val numbers = listOf(1, 2, 3, 4, 5, 6)

val evens = numbers.filter { it % 2 == 0 }
println(evens) // Вывод: [2, 4, 6]

val doubled = numbers.map { it * 2 }
println(doubled) // Вывод: [2, 4, 6, 8, 10, 12]
3. Бесконечные последовательности
Бесконечные последовательности можно создавать с помощью generateSequence. Они ленивы, и их элементы вычисляются по мере необходимости.

kotlin

val sequence = generateSequence(1) { it + 1 }
val firstTen = sequence.take(10).toList()
println(firstTen) // Вывод: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
4. Функция zip
Функция zip объединяет два списка, создавая пары.

kotlin

val names = listOf("Alice", "Bob", "Charlie")
val ages = listOf(25, 30, 28)

val combined = names.zip(ages)
println(combined) // Вывод: [(Alice, 25), (Bob, 30), (Charlie, 28)]
5. Функция flatMap
flatMap преобразует коллекцию элементов в коллекцию коллекций и затем "распрямляет" их в одну коллекцию.

kotlin

val nestedList = listOf(listOf(1, 2, 3), listOf(4, 5), listOf(6))

val flatList = nestedList.flatMap { it }
println(flatList) // Вывод: [1, 2, 3, 4, 5, 6]
6. Функции with и let
with: позволяет выполнить несколько операций над одним объектом.
kotlin

val person = Person("Alice", 25)
with(person) {
    println(name)
    println(age)
}
let: применяет блок к объекту и возвращает результат этого блока.
kotlin

val name = "Alice"
val length = name.let {
    println(it)
    it.length
}
println(length) // Вывод: 5
7. Создание функций высшего порядка
Функция высшего порядка — это функция, принимающая другую функцию как параметр или возвращающая её.

kotlin

fun <T> applyTwice(f: (T) -> T, x: T): T {
    return f(f(x))
}

val double = { x: Int -> x * 2 }
println(applyTwice(double, 3)) // Вывод: 12
8. Extension-функции
Extension-функции позволяют добавлять новые методы в существующие классы без необходимости изменять их.

kotlin


fun Person.fullName(): String {
    return "$firstName $lastName"
}

fun main() {
    val person = Person("John", "Doe")
    println(person.fullName()) // Вывод: John Doe
}






    