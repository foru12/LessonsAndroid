package com.example.architecturalpatterns

import android.os.Bundle
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import com.example.architecturalpatterns.Singlton.convertDate

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(R.layout.activity_main)
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        //Sington
        println(convertDate("27.05.2024"))


        //Builder
        val product = Product.Builder()
            .setName("Laptop")
            .setPrice(1500.0)
            .setDescription("High-performance laptop")
            .build()

        println("Product Name: ${product.name}")
        println("Product Price: ${product.price}")
        println("Product Description: ${product.description}")



        //DI
        val client = Injector.provideClient()
        client.doSomething()



        //Fabrice
        val productAFactory: ProductFactory = ConcreteProductAFactory()
        val productA: Product2 = productAFactory.createProduct()
        productA.use()

        val productBFactory: ProductFactory = ConcreteProductBFactory()
        val productB: Product2 = productBFactory.createProduct()
        productB.use()












    }
}




/*

Шаблоны создания: как вы создаете объекты.
Структурные шаблоны: как вы создаете объекты.
Поведенческие шаблоны: как вы координируете взаимодействия с объектами.
1. Шаблоны создания
Singleton
Конструктор
Внедрение зависимостей
Фабрика


Синглтон:

Одноэлементный шаблон гарантирует, что когда-либо будет создан только один объект определенного класса. Все дальнейшие ссылки на объекты одноэлементного класса относятся к одному и тому же базовому экземпляру. Приложений очень мало, не злоупотребляйте этим шаблоном.



Конструктор:

Шаблон builder используется для создания сложных объектов с составными частями, которые должны создаваться в том же порядке или с использованием определенного алгоритма. Внешний класс управляет алгоритмом построения. Нажмите здесь

Фабрика:

Как следует из названия, Factory заботится обо всей логике создания объекта. В этом шаблоне класс factory определяет, какой объект создавать. Шаблон Factory удобен при работе со многими обычными объектами. Вы можете использовать его там, где, возможно, не захотите указывать конкретный класс. Нажмите здесь
Внедрение зависимостей:

Внедрение зависимостей похоже на переезд в меблированную квартиру. Все, что вам нужно, уже есть. Вам не нужно ждать доставки мебели или следовать инструкциям IKEA, чтобы собрать книжную полку Borgsjö.
С точки зрения программного обеспечения, внедрение зависимостей позволяет вам предоставить любые необходимые объекты для создания экземпляра нового объекта. Этому новому объекту не нужно создавать или настраивать сами объекты.
В Android вам может потребоваться доступ к одним и тем же сложным объектам из разных точек вашего приложения, таких как сетевой клиент, загрузчик изображений или SharedPreferences для локального хранилища. Вы можете внедрять эти объекты в свои действия и фрагменты и сразу же получать к ним доступ.
В настоящее время существуют три основные библиотеки для внедрения зависимостей: Dagger ‘2’, Dagger Hilt и Koin.






2. Структурные шаблоны
Все эти шаблоны проектирования касаются композиции классов и объектов. Структурные шаблоны создания классов используют наследование для создания интерфейсов. Структурные шаблоны объектов определяют способы компоновки объектов для получения новой функциональности.

Фасад
Адаптер
Декоратор
Композитный
Прокси для защиты




Фасад:

Шаблон facade используется для определения упрощенного интерфейса к более сложной подсистеме.
Адаптер:

Шаблон адаптера используется для обеспечения связи между двумя несовместимыми в остальном типами путем обертывания ”адаптируемого" классом, поддерживающим интерфейс, требуемый клиентом.
Декоратор:

Шаблон декоратора используется для расширения или изменения функциональности объектов во время выполнения путем их обертывания в объект класса декоратора. Это обеспечивает гибкую альтернативу использованию наследования для изменения поведения.
Составной:

Составной шаблон используется для создания нуля или более похожих объектов, чтобы ими можно было манипулировать как одним объектом.
Прокси для защиты:

Шаблон прокси используется для предоставления суррогатного объекта или объекта-заполнителя, который ссылается на базовый объект. Защитный прокси ограничивает доступ.



3. Поведенческие шаблоны
Команда
Наблюдатель
СТРАТЕГИИ
Состояние
Посетитель
Посредник
На память
Цепочка ответственности


Команда:

Шаблон command используется для выражения запроса, включая выполняемый вызов и все его требуемые параметры, в объекте command. Затем команда может быть выполнена немедленно или сохранена для последующего использования.
Наблюдатель:

Шаблон observer используется, чтобы разрешить объекту публиковать изменения своего состояния. Другие объекты подписываются на получение немедленных уведомлений о любых изменениях.
Стратегия:

Шаблон стратегии используется для создания взаимозаменяемого семейства алгоритмов, из которых во время выполнения выбирается требуемый процесс.
Состояние:

Шаблон состояния используется для изменения поведения объекта по мере изменения его внутреннего состояния. Шаблон позволяет классу объекта изменяться во время выполнения.
Посетитель:

Шаблон visitor используется для отделения относительно сложного набора структурированных классов данных от функциональности, которая может быть выполнена с данными, которые они хранят.
Посредник:

Шаблон проектирования mediator используется для обеспечения централизованного средства связи между различными объектами в системе. Этот шаблон очень полезен в корпоративных приложениях, где несколько объектов взаимодействуют друг с другом.
Памятный подарок:

Шаблон memento - это шаблон проектирования программного обеспечения, который предоставляет возможность восстановить объект в его предыдущее состояние (отменить с помощью отката).
Цепочка ответственности:
Шаблон цепочки ответственности используется для обработки различных запросов, каждый из которых может обрабатываться другим обработчиком.
*/

